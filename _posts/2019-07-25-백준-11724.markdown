---
layout: post
title:  "[백준] 11724 연결 요소의 개수"
author: Gyurin
categories: algorithm
tags: DFS BFS 백준
---


## 문제
<a href="https://www.acmicpc.net/problem/11724" target="blank">
  <img src="{{site.baseurl}}/assets/algorithm/BOJ-11724-problem.png" title="[백준] 11724 연결 요소의 개수">
</a>

## 아이디어
<a href="{{site.baseurl}}/algorithm/2019/07/24/백준-1260.html">[백준] 1260 DFS와 BFS</a>와 99% 같은 문제이다. 서로 다른 connected component에 속한 정점들은 한 번의 탐색에 대해 같이 방문될 수 없다. 그러므로 connected component의 개수를 세기 위해선, 모든 정점을 방문할 때까지 탐색한 횟수가 된다.<br><br>

## 코드
다음은 BFS 코드이다.
{% highlight C++ linenos=table %}
#include <iostream>
#include <vector>
#include <queue>
#include <cstring>
using namespace std;

const int MAX=1001;
int N, M;
vector<int> v[MAX];
bool vst[MAX];

void bfs(int start){
    vst[start] = true;
    queue<int> q;
    q.push(start);

    while(!q.empty()){
        int u = q.front();  q.pop();

        for(int i=0; i<v[u].size(); i++){
            int cur = v[u][i];
            if(!vst[cur]){
                vst[cur] = true;
                q.push(cur);
            }
        }
    }

}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(NULL);  cout.tie(NULL);

    memset(vst, false, sizeof(vst));
    cin >> N >> M;
    for(int i=0; i<M; i++){
        int x, y;   cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }

    int res=0;
    for(int i=1; i<=N; i++){
        if(!vst[i]){
            res++;
            bfs(i);
        }
    }

    cout << res << "\n";
    return 0;
}
{% endhighlight %}

<br>다음은 DFS 코드이다.<br>
{% highlight C++ linenos=table %}
#include <iostream>
#include <vector>
#include <cstring>
using namespace std;

const int MAX=1001;
int N, M;
vector<int> v[MAX];
bool vst[MAX];

void dfs(int start){
    for(int i=0; i<v[start].size(); i++){
        int cur = v[start][i];
        if(!vst[cur]){
            vst[cur] = true;
            dfs(cur);
        }
    }
}

int main(){
    ios::sync_with_stdio(false);
    cin.tie(NULL);  cout.tie(NULL);

    memset(vst, false, sizeof(vst));
    cin >> N >> M;
    for(int i=0; i<M; i++){
        int x, y;   cin >> x >> y;
        v[x].push_back(y);
        v[y].push_back(x);
    }

    int res=0;
    for(int i=1; i<=N; i++){
        if(!vst[i]){
            res++;
            vst[i] = true;
            dfs(i);
        }
    }

    cout << res << "\n";
    return 0;
}
{% endhighlight %}

## 결과
<img src="{{site.baseurl}}/assets/algorithm/BOJ-11724-result.png" title="[백준] 11724 연결 요소의 개수">
